# We need to setup different context root for the auth server so that we can store separate
# cookies for both the API gateway as well as the OAuth2 authorization server.
server:
  port: 8899
  contextPath: /userauth

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

security:
  user:
    password: password

# Datasource and JPA configuration to be used for storing the OAuth authorization details
# and token store
#MY-SQL
###########
#spring:
  #datasource:
    #url: jdbc:mysql://localhost:3306/auth
    #username: root
    #password: password
   # driver-class: com.mysql.jdbc.Driver

  #jpa:
    #database-platform: org.hibernate.dialect.MySQLDialect
    #show-sql: false
    #hibernate:
#      ddl-auto: create
##################

#H2 In Memory
###############

spring:
   datasource:
     url: jdbc:h2:mem:auth;DB_CLOSE_DELAY=-1;MODE=MySQL
     username: sa
     password:
     driver-class: org.h2.Driver
     initialize: true
     platform: h2
     schema: classpath:schema-h2.sql
   h2:
    console:
      enabled: true
   jpa:
     hibernate:
       ddl-auto: create-drop	   
---

spring:
  profiles: docker
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://192.168.59.103:8761/eureka/
